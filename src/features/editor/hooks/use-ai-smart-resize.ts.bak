import { fabric } from 'fabric';
import { useCallback, useState } from 'react';
import { OpenAIVisionService } from '../services/openai-vision';

interface UseAISmartResizeProps {
  canvas: fabric.Canvas | null;
  getWorkspace: () => fabric.Object | undefined;
  autoZoom: () => void;
  save: () => void;
  openaiApiKey?: string;
}

export const useAISmartResize = ({ 
  canvas, 
  getWorkspace, 
  autoZoom, 
  save,
  openaiApiKey 
}: UseAISmartResizeProps) => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const aiSmartResize = useCallback(
    async (newSize: { width: number; height: number }) => {
      console.log('AI Smart Resize called with:', newSize);
      
      if (!canvas || !openaiApiKey) {
        console.log('Missing canvas or OpenAI API key');
        return;
      }

      setIsAnalyzing(true);

      try {
        // Get current workspace
        let workspace = getWorkspace() as fabric.Rect;
        let currentSize = { width: 800, height: 600 }; // fallback

        if (workspace) {
          currentSize = {
            width: workspace.width || 800,
            height: workspace.height || 600
          };
        } else {
          // Try to find the white background rectangle
          const allObjects = canvas.getObjects();
          const backgroundRect = allObjects.find(obj => 
            obj.type === 'rect' && 
            obj.fill === 'white' && 
            !obj.selectable
          );
          
          if (backgroundRect) {
            workspace = backgroundRect as fabric.Rect;
            currentSize = {
              width: workspace.width || 800,
              height: workspace.height || 600
            };
          }
        }

        console.log('Current workspace size:', currentSize);
        console.log('Target size:', newSize);

        // Initialize OpenAI service
        const openaiService = new OpenAIVisionService(openaiApiKey);

        // Capture canvas as base64 for analysis
        const canvasBase64 = await openaiService.captureCanvas(canvas);
        
        // Get AI analysis
        const analysis = await openaiService.analyzeCanvas(canvasBase64, currentSize, newSize);
        console.log('AI Analysis:', analysis);
        console.log('Layout Strategy:', analysis.layoutStrategy);
        console.log('Design Principles:', analysis.designPrinciples);

        // First, resize the workspace/canvas
        if (workspace) {
          console.log('Resizing workspace to:', newSize);
          workspace.set({
            width: newSize.width,
            height: newSize.height
          });
          workspace.setCoords();
          
          // Update clipping if workspace is used as clipPath
          if (canvas.clipPath === workspace) {
            canvas.clipPath = workspace;
          }
          
          workspace.set('dirty', true);
        }

        // Get all objects except workspace
        const objects = canvas.getObjects().filter(obj => 
          obj !== workspace && obj.name !== 'clip'
        );

        console.log('Processing', objects.length, 'objects with AI guidance');

        // Apply AI-recommended positioning for each object
        objects.forEach((obj, index) => {
          try {
            console.log(`Processing object ${index}:`, obj.type);

            // Remove from any groups first
            if (obj.group) {
              obj.group.removeWithUpdate(obj);
            }

            const currentBounds = obj.getBoundingRect();
            console.log(`Object ${index} current bounds:`, currentBounds);
            
            // Find AI recommendation for this object
            const aiRecommendation = analysis.objects[index];
            
            let newLeft, newTop, targetScale;
            
            if (aiRecommendation && aiRecommendation.newPosition) {
              // Use AI-recommended position and scale
              newLeft = aiRecommendation.newPosition.x;
              newTop = aiRecommendation.newPosition.y;
              targetScale = aiRecommendation.newPosition.scale;
              
              console.log(`AI recommendation for object ${index}:`, aiRecommendation.description);
              console.log(`AI positioning: x=${newLeft}, y=${newTop}, scale=${targetScale}`);
              if (aiRecommendation.reasoning) {
                console.log(`AI reasoning: ${aiRecommendation.reasoning}`);
              }
            } else {
              // Fallback to proportional scaling if no AI recommendation
              console.log(`No AI recommendation for object ${index}, using proportional scaling`);
              
              const scaleX = newSize.width / currentSize.width;
              const scaleY = newSize.height / currentSize.height;
              targetScale = Math.min(scaleX, scaleY);
              
              // Conservative scaling
              if (targetScale < 1) {
                targetScale = Math.max(targetScale, 0.5);
              }
              if (targetScale > 1) {
                targetScale = Math.min(targetScale, 1.5);
              }

              // Proportional position
              const relativeX = currentBounds.left / currentSize.width;
              const relativeY = currentBounds.top / currentSize.height;
              
              newLeft = relativeX * newSize.width;
              newTop = relativeY * newSize.height;
            }

            // Ensure objects stay within canvas bounds
            const margin = 10;
            const objWidth = currentBounds.width * targetScale;
            const objHeight = currentBounds.height * targetScale;

            newLeft = Math.max(margin, Math.min(newLeft, newSize.width - objWidth - margin));
            newTop = Math.max(margin, Math.min(newTop, newSize.height - objHeight - margin));

            console.log(`Final positioning for object ${index}: (${newLeft.toFixed(0)}, ${newTop.toFixed(0)}), scale: ${targetScale.toFixed(2)}`);

            // Apply transformations
            obj.set({
              left: newLeft,
              top: newTop,
              scaleX: targetScale,
              scaleY: targetScale
            });

            obj.setCoords();
            obj.set('dirty', true);

          } catch (error) {
            console.error('Error processing object:', error);
            // Don't let errors break the entire process
          }
        });

        // Force canvas refresh
        canvas.renderAll();
        console.log('Canvas rendered after AI resize');

        // Update and save
        autoZoom();
        save();
        
        console.log('AI Smart resize completed successfully');

      } catch (error) {
        console.error('AI Smart Resize error:', error);
        console.log('Falling back to basic resize...');
        
        // Fallback to basic resize if AI fails
        basicResize(newSize);
      } finally {
        setIsAnalyzing(false);
      }
    },
    [canvas, getWorkspace, autoZoom, save, openaiApiKey]
  );

  // Fallback basic resize function
  const basicResize = useCallback(
    (newSize: { width: number; height: number }) => {
      console.log('Using basic resize fallback');
      
      if (!canvas) return;

      let workspace = getWorkspace() as fabric.Rect;
      let currentSize = { width: 800, height: 600 };

      if (workspace) {
        currentSize = {
          width: workspace.width || 800,
          height: workspace.height || 600
        };

        console.log('Resizing workspace from', currentSize, 'to', newSize);

        // Resize workspace
        workspace.set({
          width: newSize.width,
          height: newSize.height
        });
        workspace.setCoords();

        if (canvas.clipPath === workspace) {
          canvas.clipPath = workspace;
        }
        workspace.set('dirty', true);
      }

      // Calculate scale factors
      const scaleX = newSize.width / currentSize.width;
      const scaleY = newSize.height / currentSize.height;
      const scale = Math.min(scaleX, scaleY);

      console.log('Scale factors:', { scaleX, scaleY, scale });

      // Apply basic proportional scaling
      const objects = canvas.getObjects().filter(obj => 
        obj !== workspace && obj.name !== 'clip'
      );

      console.log('Basic resize: processing', objects.length, 'objects');

      objects.forEach((obj, index) => {
        try {
          if (obj.group) {
            obj.group.removeWithUpdate(obj);
          }

          const bounds = obj.getBoundingRect();
          console.log(`Basic resize object ${index}:`, bounds);

          // More conservative scaling for basic resize
          let targetScale = scale;
          if (targetScale < 1) {
            targetScale = Math.max(targetScale, 0.6); // Don't go below 60%
          }
          if (targetScale > 1) {
            targetScale = Math.min(targetScale, 1.3); // Don't go above 130%
          }

          // Calculate proportional position
          const relativeX = bounds.left / currentSize.width;
          const relativeY = bounds.top / currentSize.height;
          
          const newLeft = relativeX * newSize.width;
          const newTop = relativeY * newSize.height;

          // Ensure within bounds
          const margin = 15;
          const objWidth = bounds.width * targetScale;
          const objHeight = bounds.height * targetScale;

          const finalLeft = Math.max(margin, Math.min(newLeft, newSize.width - objWidth - margin));
          const finalTop = Math.max(margin, Math.min(newTop, newSize.height - objHeight - margin));

          console.log(`Basic resize object ${index}: ${bounds.left.toFixed(0)},${bounds.top.toFixed(0)} -> ${finalLeft.toFixed(0)},${finalTop.toFixed(0)}, scale: ${targetScale.toFixed(2)}`);

          obj.set({
            left: finalLeft,
            top: finalTop,
            scaleX: targetScale,
            scaleY: targetScale
          });

          obj.setCoords();
          obj.set('dirty', true);

        } catch (error) {
          console.error('Error in basic resize for object:', error);
        }
      });

      canvas.renderAll();
      autoZoom();
      console.log('Basic resize completed');
    },
    [canvas, getWorkspace, autoZoom]
  );

  return {
    aiSmartResize,
    isAnalyzing
  };
};